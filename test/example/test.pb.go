// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.2
// source: test.proto

package example

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Typ int32

const (
	Typ_UNKNOWN Typ = 0
	Typ_TYPA    Typ = 1
	Typ_TYPB    Typ = 2
)

// Enum value maps for Typ.
var (
	Typ_name = map[int32]string{
		0: "UNKNOWN",
		1: "TYPA",
		2: "TYPB",
	}
	Typ_value = map[string]int32{
		"UNKNOWN": 0,
		"TYPA":    1,
		"TYPB":    2,
	}
)

func (x Typ) Enum() *Typ {
	p := new(Typ)
	*p = x
	return p
}

func (x Typ) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Typ) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[0].Descriptor()
}

func (Typ) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[0]
}

func (x Typ) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Typ.Descriptor instead.
func (Typ) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

type Example_NestedTyp int32

const (
	Example_UNKNOWN Example_NestedTyp = 0
	Example_TYPA    Example_NestedTyp = 1
	Example_TYPB    Example_NestedTyp = 2
)

// Enum value maps for Example_NestedTyp.
var (
	Example_NestedTyp_name = map[int32]string{
		0: "UNKNOWN",
		1: "TYPA",
		2: "TYPB",
	}
	Example_NestedTyp_value = map[string]int32{
		"UNKNOWN": 0,
		"TYPA":    1,
		"TYPB":    2,
	}
)

func (x Example_NestedTyp) Enum() *Example_NestedTyp {
	p := new(Example_NestedTyp)
	*p = x
	return p
}

func (x Example_NestedTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Example_NestedTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[1].Descriptor()
}

func (Example_NestedTyp) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[1]
}

func (x Example_NestedTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Example_NestedTyp.Descriptor instead.
func (Example_NestedTyp) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1, 0}
}

type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基本类型
	Bol   bool    `protobuf:"varint,1,opt,name=bol,proto3" json:"bol,omitempty"`
	Str   string  `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
	In32  int32   `protobuf:"varint,3,opt,name=in32,proto3" json:"in32,omitempty"`
	In64  int64   `protobuf:"varint,4,opt,name=in64,proto3" json:"in64,omitempty"`
	Uin32 uint32  `protobuf:"varint,5,opt,name=uin32,proto3" json:"uin32,omitempty"`
	Uin64 uint64  `protobuf:"varint,6,opt,name=uin64,proto3" json:"uin64,omitempty"`
	Flt32 float32 `protobuf:"fixed32,7,opt,name=flt32,proto3" json:"flt32,omitempty"`
	Flt64 float64 `protobuf:"fixed64,8,opt,name=flt64,proto3" json:"flt64,omitempty"`
	Byts  []byte  `protobuf:"bytes,9,opt,name=byts,proto3" json:"byts,omitempty"`
	// TODO enum
	// message
	//Msg msg = 11;
	// 数组
	BolArr   []bool    `protobuf:"varint,12,rep,packed,name=bol_arr,json=bolArr,proto3" json:"bol_arr,omitempty"`
	StrArr   []string  `protobuf:"bytes,13,rep,name=str_arr,json=strArr,proto3" json:"str_arr,omitempty"`
	In32Arr  []int32   `protobuf:"varint,14,rep,packed,name=in32_arr,json=in32Arr,proto3" json:"in32_arr,omitempty"`
	In64Arr  []int64   `protobuf:"varint,15,rep,packed,name=in64_arr,json=in64Arr,proto3" json:"in64_arr,omitempty"`
	Uin32Arr []uint32  `protobuf:"varint,16,rep,packed,name=uin32_arr,json=uin32Arr,proto3" json:"uin32_arr,omitempty"`
	Uin64Arr []uint64  `protobuf:"varint,17,rep,packed,name=uin64_arr,json=uin64Arr,proto3" json:"uin64_arr,omitempty"`
	Flt32Arr []float32 `protobuf:"fixed32,18,rep,packed,name=flt32_arr,json=flt32Arr,proto3" json:"flt32_arr,omitempty"`
	Flt64Arr []float64 `protobuf:"fixed64,19,rep,packed,name=flt64_arr,json=flt64Arr,proto3" json:"flt64_arr,omitempty"`
	BytsArr  [][]byte  `protobuf:"bytes,20,rep,name=byts_arr,json=bytsArr,proto3" json:"byts_arr,omitempty"`
	// TODO enum
	//repeated Msg msg_arr = 22;
	// map
	BolMap    map[string]bool    `protobuf:"bytes,23,rep,name=bol_map,json=bolMap,proto3" json:"bol_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringMap map[string]string  `protobuf:"bytes,24,rep,name=string_map,json=stringMap,proto3" json:"string_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	In32Map   map[string]int32   `protobuf:"bytes,25,rep,name=in32_map,json=in32Map,proto3" json:"in32_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	In64Map   map[string]int64   `protobuf:"bytes,26,rep,name=in64_map,json=in64Map,proto3" json:"in64_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Uin32Map  map[string]uint32  `protobuf:"bytes,27,rep,name=uin32_map,json=uin32Map,proto3" json:"uin32_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Uin64Map  map[string]uint64  `protobuf:"bytes,28,rep,name=uin64_map,json=uin64Map,proto3" json:"uin64_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Flt32Map  map[string]float32 `protobuf:"bytes,29,rep,name=flt32_map,json=flt32Map,proto3" json:"flt32_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Flt64Map  map[string]float64 `protobuf:"bytes,30,rep,name=flt64_map,json=flt64Map,proto3" json:"flt64_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	BytsMap   map[string][]byte  `protobuf:"bytes,31,rep,name=byts_map,json=bytsMap,proto3" json:"byts_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// TODO enum
	// map<string, Msg> msg_map = 33;
	//
	// Types that are assignable to TestOneof:
	//	*Msg_OneofBol
	TestOneof isMsg_TestOneof `protobuf_oneof:"test_oneof"`
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *Msg) GetBol() bool {
	if x != nil {
		return x.Bol
	}
	return false
}

func (x *Msg) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *Msg) GetIn32() int32 {
	if x != nil {
		return x.In32
	}
	return 0
}

func (x *Msg) GetIn64() int64 {
	if x != nil {
		return x.In64
	}
	return 0
}

func (x *Msg) GetUin32() uint32 {
	if x != nil {
		return x.Uin32
	}
	return 0
}

func (x *Msg) GetUin64() uint64 {
	if x != nil {
		return x.Uin64
	}
	return 0
}

func (x *Msg) GetFlt32() float32 {
	if x != nil {
		return x.Flt32
	}
	return 0
}

func (x *Msg) GetFlt64() float64 {
	if x != nil {
		return x.Flt64
	}
	return 0
}

func (x *Msg) GetByts() []byte {
	if x != nil {
		return x.Byts
	}
	return nil
}

func (x *Msg) GetBolArr() []bool {
	if x != nil {
		return x.BolArr
	}
	return nil
}

func (x *Msg) GetStrArr() []string {
	if x != nil {
		return x.StrArr
	}
	return nil
}

func (x *Msg) GetIn32Arr() []int32 {
	if x != nil {
		return x.In32Arr
	}
	return nil
}

func (x *Msg) GetIn64Arr() []int64 {
	if x != nil {
		return x.In64Arr
	}
	return nil
}

func (x *Msg) GetUin32Arr() []uint32 {
	if x != nil {
		return x.Uin32Arr
	}
	return nil
}

func (x *Msg) GetUin64Arr() []uint64 {
	if x != nil {
		return x.Uin64Arr
	}
	return nil
}

func (x *Msg) GetFlt32Arr() []float32 {
	if x != nil {
		return x.Flt32Arr
	}
	return nil
}

func (x *Msg) GetFlt64Arr() []float64 {
	if x != nil {
		return x.Flt64Arr
	}
	return nil
}

func (x *Msg) GetBytsArr() [][]byte {
	if x != nil {
		return x.BytsArr
	}
	return nil
}

func (x *Msg) GetBolMap() map[string]bool {
	if x != nil {
		return x.BolMap
	}
	return nil
}

func (x *Msg) GetStringMap() map[string]string {
	if x != nil {
		return x.StringMap
	}
	return nil
}

func (x *Msg) GetIn32Map() map[string]int32 {
	if x != nil {
		return x.In32Map
	}
	return nil
}

func (x *Msg) GetIn64Map() map[string]int64 {
	if x != nil {
		return x.In64Map
	}
	return nil
}

func (x *Msg) GetUin32Map() map[string]uint32 {
	if x != nil {
		return x.Uin32Map
	}
	return nil
}

func (x *Msg) GetUin64Map() map[string]uint64 {
	if x != nil {
		return x.Uin64Map
	}
	return nil
}

func (x *Msg) GetFlt32Map() map[string]float32 {
	if x != nil {
		return x.Flt32Map
	}
	return nil
}

func (x *Msg) GetFlt64Map() map[string]float64 {
	if x != nil {
		return x.Flt64Map
	}
	return nil
}

func (x *Msg) GetBytsMap() map[string][]byte {
	if x != nil {
		return x.BytsMap
	}
	return nil
}

func (m *Msg) GetTestOneof() isMsg_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (x *Msg) GetOneofBol() bool {
	if x, ok := x.GetTestOneof().(*Msg_OneofBol); ok {
		return x.OneofBol
	}
	return false
}

type isMsg_TestOneof interface {
	isMsg_TestOneof()
}

type Msg_OneofBol struct {
	OneofBol bool `protobuf:"varint,101,opt,name=oneof_bol,json=oneofBol,proto3,oneof"`
}

func (*Msg_OneofBol) isMsg_TestOneof() {}

type Example struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基本类型
	Bol   bool    `protobuf:"varint,1,opt,name=bol,proto3" json:"bol,omitempty"`
	Str   string  `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
	In32  int32   `protobuf:"varint,3,opt,name=in32,proto3" json:"in32,omitempty"`
	In64  int64   `protobuf:"varint,4,opt,name=in64,proto3" json:"in64,omitempty"`
	Uin32 uint32  `protobuf:"varint,5,opt,name=uin32,proto3" json:"uin32,omitempty"`
	Uin64 uint64  `protobuf:"varint,6,opt,name=uin64,proto3" json:"uin64,omitempty"`
	Flt32 float32 `protobuf:"fixed32,7,opt,name=flt32,proto3" json:"flt32,omitempty"`
	Flt64 float64 `protobuf:"fixed64,8,opt,name=flt64,proto3" json:"flt64,omitempty"`
	Byts  []byte  `protobuf:"bytes,9,opt,name=byts,proto3" json:"byts,omitempty"`
	// enum
	Typ Typ `protobuf:"varint,10,opt,name=typ,proto3,enum=example.Typ" json:"typ,omitempty"`
	// message
	Msg *Msg `protobuf:"bytes,11,opt,name=msg,proto3" json:"msg,omitempty"`
	// 数组
	BolArr   []bool    `protobuf:"varint,12,rep,packed,name=bol_arr,json=bolArr,proto3" json:"bol_arr,omitempty"`
	StrArr   []string  `protobuf:"bytes,13,rep,name=str_arr,json=strArr,proto3" json:"str_arr,omitempty"`
	In32Arr  []int32   `protobuf:"varint,14,rep,packed,name=in32_arr,json=in32Arr,proto3" json:"in32_arr,omitempty"`
	In64Arr  []int64   `protobuf:"varint,15,rep,packed,name=in64_arr,json=in64Arr,proto3" json:"in64_arr,omitempty"`
	Uin32Arr []uint32  `protobuf:"varint,16,rep,packed,name=uin32_arr,json=uin32Arr,proto3" json:"uin32_arr,omitempty"`
	Uin64Arr []uint64  `protobuf:"varint,17,rep,packed,name=uin64_arr,json=uin64Arr,proto3" json:"uin64_arr,omitempty"`
	Flt32Arr []float32 `protobuf:"fixed32,18,rep,packed,name=flt32_arr,json=flt32Arr,proto3" json:"flt32_arr,omitempty"`
	Flt64Arr []float64 `protobuf:"fixed64,19,rep,packed,name=flt64_arr,json=flt64Arr,proto3" json:"flt64_arr,omitempty"`
	BytsArr  [][]byte  `protobuf:"bytes,20,rep,name=byts_arr,json=bytsArr,proto3" json:"byts_arr,omitempty"`
	// enum
	TypArr []Typ  `protobuf:"varint,21,rep,packed,name=typ_arr,json=typArr,proto3,enum=example.Typ" json:"typ_arr,omitempty"`
	MsgArr []*Msg `protobuf:"bytes,22,rep,name=msg_arr,json=msgArr,proto3" json:"msg_arr,omitempty"`
	// map
	BolMap    map[string]bool    `protobuf:"bytes,23,rep,name=bol_map,json=bolMap,proto3" json:"bol_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringMap map[string]string  `protobuf:"bytes,24,rep,name=string_map,json=stringMap,proto3" json:"string_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	In32Map   map[string]int32   `protobuf:"bytes,25,rep,name=in32_map,json=in32Map,proto3" json:"in32_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	In64Map   map[string]int64   `protobuf:"bytes,26,rep,name=in64_map,json=in64Map,proto3" json:"in64_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Uin32Map  map[string]uint32  `protobuf:"bytes,27,rep,name=uin32_map,json=uin32Map,proto3" json:"uin32_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Uin64Map  map[string]uint64  `protobuf:"bytes,28,rep,name=uin64_map,json=uin64Map,proto3" json:"uin64_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Flt32Map  map[string]float32 `protobuf:"bytes,29,rep,name=flt32_map,json=flt32Map,proto3" json:"flt32_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Flt64Map  map[string]float64 `protobuf:"bytes,30,rep,name=flt64_map,json=flt64Map,proto3" json:"flt64_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	BytsMap   map[string][]byte  `protobuf:"bytes,31,rep,name=byts_map,json=bytsMap,proto3" json:"byts_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// enum
	TypMap map[string]Typ  `protobuf:"bytes,32,rep,name=typ_map,json=typMap,proto3" json:"typ_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=example.Typ"`
	MsgMap map[string]*Msg `protobuf:"bytes,33,rep,name=msg_map,json=msgMap,proto3" json:"msg_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// enum
	NestedTyp Example_NestedTyp `protobuf:"varint,34,opt,name=nested_typ,json=nestedTyp,proto3,enum=example.Example_NestedTyp" json:"nested_typ,omitempty"`
	// message
	NestedMsg    *Example_NestedMsg            `protobuf:"bytes,35,opt,name=nested_msg,json=nestedMsg,proto3" json:"nested_msg,omitempty"`
	NestedTypMap map[string]Example_NestedTyp  `protobuf:"bytes,36,rep,name=nested_typ_map,json=nestedTypMap,proto3" json:"nested_typ_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=example.Example_NestedTyp"`
	NestedMsgMap map[string]*Example_NestedMsg `protobuf:"bytes,37,rep,name=nested_msg_map,json=nestedMsgMap,proto3" json:"nested_msg_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to TestOneof:
	//	*Example_OneofBol
	//	*Example_OneofStr
	//	*Example_OneofIn32
	//	*Example_OneofIn64
	//	*Example_OneofUin32
	//	*Example_OneofUin64
	//	*Example_OneofFlt32
	//	*Example_OneofFlt64
	//	*Example_OneofByts
	//	*Example_OneofMsg
	TestOneof isExample_TestOneof `protobuf_oneof:"test_oneof"`
}

func (x *Example) Reset() {
	*x = Example{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Example) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Example) ProtoMessage() {}

func (x *Example) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Example.ProtoReflect.Descriptor instead.
func (*Example) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *Example) GetBol() bool {
	if x != nil {
		return x.Bol
	}
	return false
}

func (x *Example) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *Example) GetIn32() int32 {
	if x != nil {
		return x.In32
	}
	return 0
}

func (x *Example) GetIn64() int64 {
	if x != nil {
		return x.In64
	}
	return 0
}

func (x *Example) GetUin32() uint32 {
	if x != nil {
		return x.Uin32
	}
	return 0
}

func (x *Example) GetUin64() uint64 {
	if x != nil {
		return x.Uin64
	}
	return 0
}

func (x *Example) GetFlt32() float32 {
	if x != nil {
		return x.Flt32
	}
	return 0
}

func (x *Example) GetFlt64() float64 {
	if x != nil {
		return x.Flt64
	}
	return 0
}

func (x *Example) GetByts() []byte {
	if x != nil {
		return x.Byts
	}
	return nil
}

func (x *Example) GetTyp() Typ {
	if x != nil {
		return x.Typ
	}
	return Typ_UNKNOWN
}

func (x *Example) GetMsg() *Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *Example) GetBolArr() []bool {
	if x != nil {
		return x.BolArr
	}
	return nil
}

func (x *Example) GetStrArr() []string {
	if x != nil {
		return x.StrArr
	}
	return nil
}

func (x *Example) GetIn32Arr() []int32 {
	if x != nil {
		return x.In32Arr
	}
	return nil
}

func (x *Example) GetIn64Arr() []int64 {
	if x != nil {
		return x.In64Arr
	}
	return nil
}

func (x *Example) GetUin32Arr() []uint32 {
	if x != nil {
		return x.Uin32Arr
	}
	return nil
}

func (x *Example) GetUin64Arr() []uint64 {
	if x != nil {
		return x.Uin64Arr
	}
	return nil
}

func (x *Example) GetFlt32Arr() []float32 {
	if x != nil {
		return x.Flt32Arr
	}
	return nil
}

func (x *Example) GetFlt64Arr() []float64 {
	if x != nil {
		return x.Flt64Arr
	}
	return nil
}

func (x *Example) GetBytsArr() [][]byte {
	if x != nil {
		return x.BytsArr
	}
	return nil
}

func (x *Example) GetTypArr() []Typ {
	if x != nil {
		return x.TypArr
	}
	return nil
}

func (x *Example) GetMsgArr() []*Msg {
	if x != nil {
		return x.MsgArr
	}
	return nil
}

func (x *Example) GetBolMap() map[string]bool {
	if x != nil {
		return x.BolMap
	}
	return nil
}

func (x *Example) GetStringMap() map[string]string {
	if x != nil {
		return x.StringMap
	}
	return nil
}

func (x *Example) GetIn32Map() map[string]int32 {
	if x != nil {
		return x.In32Map
	}
	return nil
}

func (x *Example) GetIn64Map() map[string]int64 {
	if x != nil {
		return x.In64Map
	}
	return nil
}

func (x *Example) GetUin32Map() map[string]uint32 {
	if x != nil {
		return x.Uin32Map
	}
	return nil
}

func (x *Example) GetUin64Map() map[string]uint64 {
	if x != nil {
		return x.Uin64Map
	}
	return nil
}

func (x *Example) GetFlt32Map() map[string]float32 {
	if x != nil {
		return x.Flt32Map
	}
	return nil
}

func (x *Example) GetFlt64Map() map[string]float64 {
	if x != nil {
		return x.Flt64Map
	}
	return nil
}

func (x *Example) GetBytsMap() map[string][]byte {
	if x != nil {
		return x.BytsMap
	}
	return nil
}

func (x *Example) GetTypMap() map[string]Typ {
	if x != nil {
		return x.TypMap
	}
	return nil
}

func (x *Example) GetMsgMap() map[string]*Msg {
	if x != nil {
		return x.MsgMap
	}
	return nil
}

func (x *Example) GetNestedTyp() Example_NestedTyp {
	if x != nil {
		return x.NestedTyp
	}
	return Example_UNKNOWN
}

func (x *Example) GetNestedMsg() *Example_NestedMsg {
	if x != nil {
		return x.NestedMsg
	}
	return nil
}

func (x *Example) GetNestedTypMap() map[string]Example_NestedTyp {
	if x != nil {
		return x.NestedTypMap
	}
	return nil
}

func (x *Example) GetNestedMsgMap() map[string]*Example_NestedMsg {
	if x != nil {
		return x.NestedMsgMap
	}
	return nil
}

func (m *Example) GetTestOneof() isExample_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (x *Example) GetOneofBol() bool {
	if x, ok := x.GetTestOneof().(*Example_OneofBol); ok {
		return x.OneofBol
	}
	return false
}

func (x *Example) GetOneofStr() string {
	if x, ok := x.GetTestOneof().(*Example_OneofStr); ok {
		return x.OneofStr
	}
	return ""
}

func (x *Example) GetOneofIn32() int32 {
	if x, ok := x.GetTestOneof().(*Example_OneofIn32); ok {
		return x.OneofIn32
	}
	return 0
}

func (x *Example) GetOneofIn64() int64 {
	if x, ok := x.GetTestOneof().(*Example_OneofIn64); ok {
		return x.OneofIn64
	}
	return 0
}

func (x *Example) GetOneofUin32() uint32 {
	if x, ok := x.GetTestOneof().(*Example_OneofUin32); ok {
		return x.OneofUin32
	}
	return 0
}

func (x *Example) GetOneofUin64() uint64 {
	if x, ok := x.GetTestOneof().(*Example_OneofUin64); ok {
		return x.OneofUin64
	}
	return 0
}

func (x *Example) GetOneofFlt32() float32 {
	if x, ok := x.GetTestOneof().(*Example_OneofFlt32); ok {
		return x.OneofFlt32
	}
	return 0
}

func (x *Example) GetOneofFlt64() float64 {
	if x, ok := x.GetTestOneof().(*Example_OneofFlt64); ok {
		return x.OneofFlt64
	}
	return 0
}

func (x *Example) GetOneofByts() []byte {
	if x, ok := x.GetTestOneof().(*Example_OneofByts); ok {
		return x.OneofByts
	}
	return nil
}

func (x *Example) GetOneofMsg() *Msg {
	if x, ok := x.GetTestOneof().(*Example_OneofMsg); ok {
		return x.OneofMsg
	}
	return nil
}

type isExample_TestOneof interface {
	isExample_TestOneof()
}

type Example_OneofBol struct {
	OneofBol bool `protobuf:"varint,101,opt,name=oneof_bol,json=oneofBol,proto3,oneof"`
}

type Example_OneofStr struct {
	OneofStr string `protobuf:"bytes,102,opt,name=oneof_str,json=oneofStr,proto3,oneof"`
}

type Example_OneofIn32 struct {
	OneofIn32 int32 `protobuf:"varint,103,opt,name=oneof_in32,json=oneofIn32,proto3,oneof"`
}

type Example_OneofIn64 struct {
	OneofIn64 int64 `protobuf:"varint,104,opt,name=oneof_in64,json=oneofIn64,proto3,oneof"`
}

type Example_OneofUin32 struct {
	OneofUin32 uint32 `protobuf:"varint,105,opt,name=oneof_uin32,json=oneofUin32,proto3,oneof"`
}

type Example_OneofUin64 struct {
	OneofUin64 uint64 `protobuf:"varint,106,opt,name=oneof_uin64,json=oneofUin64,proto3,oneof"`
}

type Example_OneofFlt32 struct {
	OneofFlt32 float32 `protobuf:"fixed32,107,opt,name=oneof_flt32,json=oneofFlt32,proto3,oneof"`
}

type Example_OneofFlt64 struct {
	OneofFlt64 float64 `protobuf:"fixed64,108,opt,name=oneof_flt64,json=oneofFlt64,proto3,oneof"`
}

type Example_OneofByts struct {
	OneofByts []byte `protobuf:"bytes,109,opt,name=oneof_byts,json=oneofByts,proto3,oneof"`
}

type Example_OneofMsg struct {
	// TODO enum
	// message
	OneofMsg *Msg `protobuf:"bytes,111,opt,name=oneof_msg,json=oneofMsg,proto3,oneof"`
}

func (*Example_OneofBol) isExample_TestOneof() {}

func (*Example_OneofStr) isExample_TestOneof() {}

func (*Example_OneofIn32) isExample_TestOneof() {}

func (*Example_OneofIn64) isExample_TestOneof() {}

func (*Example_OneofUin32) isExample_TestOneof() {}

func (*Example_OneofUin64) isExample_TestOneof() {}

func (*Example_OneofFlt32) isExample_TestOneof() {}

func (*Example_OneofFlt64) isExample_TestOneof() {}

func (*Example_OneofByts) isExample_TestOneof() {}

func (*Example_OneofMsg) isExample_TestOneof() {}

type Example_NestedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
}

func (x *Example_NestedMsg) Reset() {
	*x = Example_NestedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Example_NestedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Example_NestedMsg) ProtoMessage() {}

func (x *Example_NestedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Example_NestedMsg.ProtoReflect.Descriptor instead.
func (*Example_NestedMsg) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Example_NestedMsg) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0xf7, 0x0b, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x6f, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x69, 0x6e, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x36, 0x34, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x6e, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x69, 0x6e,
	0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x33, 0x32, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x75, 0x69, 0x6e, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x74, 0x33, 0x32, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x66, 0x6c, 0x74, 0x36,
	0x34, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x79, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x62, 0x79, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x6c, 0x5f, 0x61, 0x72, 0x72,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x74, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x41, 0x72, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x33, 0x32, 0x5f,
	0x61, 0x72, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x33, 0x32, 0x41,
	0x72, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x36, 0x34, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x36, 0x34, 0x41, 0x72, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x69, 0x6e, 0x33, 0x32, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x08, 0x75, 0x69, 0x6e, 0x33, 0x32, 0x41, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x69,
	0x6e, 0x36, 0x34, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x75,
	0x69, 0x6e, 0x36, 0x34, 0x41, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x74, 0x33, 0x32,
	0x5f, 0x61, 0x72, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x66, 0x6c, 0x74, 0x33,
	0x32, 0x41, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x74, 0x36, 0x34, 0x5f, 0x61, 0x72,
	0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x66, 0x6c, 0x74, 0x36, 0x34, 0x41, 0x72,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x79, 0x74, 0x73, 0x41, 0x72, 0x72, 0x12, 0x31, 0x0a, 0x07,
	0x62, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x6f, 0x6c, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x12,
	0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x08, 0x69,
	0x6e, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x49, 0x6e, 0x33, 0x32,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x33, 0x32, 0x4d, 0x61,
	0x70, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x6e, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x49, 0x6e, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x69, 0x6e, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x69, 0x6e, 0x33, 0x32,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x33, 0x32, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x69, 0x6e, 0x33, 0x32, 0x4d, 0x61, 0x70,
	0x12, 0x37, 0x0a, 0x09, 0x75, 0x69, 0x6e, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x55, 0x69, 0x6e, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x75, 0x69, 0x6e, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x6c, 0x74,
	0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x46, 0x6c, 0x74, 0x33, 0x32,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x6c, 0x74, 0x33, 0x32, 0x4d,
	0x61, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x6c, 0x74, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x46, 0x6c, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x66, 0x6c, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x08, 0x62,
	0x79, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x79, 0x74, 0x73,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x79, 0x74, 0x73, 0x4d, 0x61,
	0x70, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x62, 0x6f, 0x6c, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x6f, 0x6c,
	0x1a, 0x39, 0x0a, 0x0b, 0x42, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x49, 0x6e, 0x33,
	0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x49, 0x6e, 0x36, 0x34, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x55, 0x69, 0x6e, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b,
	0x0a, 0x0d, 0x55, 0x69, 0x6e, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46,
	0x6c, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x6c, 0x74, 0x36,
	0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x79, 0x74, 0x73, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22,
	0xf9, 0x15, 0x0a, 0x07, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6e, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69,
	0x6e, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x69, 0x6e, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x33, 0x32,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x33, 0x32, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x69, 0x6e, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x69,
	0x6e, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x74,
	0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x66, 0x6c, 0x74, 0x36, 0x34, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x79, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62,
	0x79, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x74, 0x79, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x52, 0x03,
	0x74, 0x79, 0x70, 0x12, 0x1e, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x6c, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x74, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x41, 0x72, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x33, 0x32, 0x5f, 0x61, 0x72,
	0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x33, 0x32, 0x41, 0x72, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x36, 0x34, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x36, 0x34, 0x41, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x69, 0x6e, 0x33, 0x32, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x75, 0x69, 0x6e, 0x33, 0x32, 0x41, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x69, 0x6e, 0x36,
	0x34, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x75, 0x69, 0x6e,
	0x36, 0x34, 0x41, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x74, 0x33, 0x32, 0x5f, 0x61,
	0x72, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x66, 0x6c, 0x74, 0x33, 0x32, 0x41,
	0x72, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x74, 0x36, 0x34, 0x5f, 0x61, 0x72, 0x72, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x66, 0x6c, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x07, 0x62, 0x79, 0x74, 0x73, 0x41, 0x72, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x74, 0x79,
	0x70, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x52, 0x06, 0x74, 0x79, 0x70, 0x41, 0x72,
	0x72, 0x12, 0x25, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x73, 0x67,
	0x52, 0x06, 0x6d, 0x73, 0x67, 0x41, 0x72, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x6f, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x6c, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x12,
	0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12,
	0x38, 0x0a, 0x08, 0x69, 0x6e, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x69, 0x6e, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x69, 0x6e, 0x36,
	0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x49, 0x6e,
	0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x36, 0x34,
	0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x09, 0x75, 0x69, 0x6e, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x33, 0x32, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x69, 0x6e, 0x33, 0x32, 0x4d, 0x61, 0x70,
	0x12, 0x3b, 0x0a, 0x09, 0x75, 0x69, 0x6e, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x69, 0x6e, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a,
	0x09, 0x66, 0x6c, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x46, 0x6c, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x66, 0x6c, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x09, 0x66, 0x6c,
	0x74, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x46, 0x6c, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66,
	0x6c, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x73, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x42, 0x79, 0x74, 0x73,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x79, 0x74, 0x73, 0x4d, 0x61,
	0x70, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x20, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x12,
	0x39, 0x0a, 0x0a, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x52,
	0x09, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x48, 0x0a, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x4d, 0x61, 0x70, 0x12,
	0x48, 0x0a, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x62, 0x6f, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74, 0x72, 0x12, 0x1f, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x5f, 0x69, 0x6e, 0x33, 0x32, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x49, 0x6e, 0x33, 0x32, 0x12, 0x1f, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x69, 0x6e, 0x36, 0x34, 0x18, 0x68, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x49, 0x6e, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x33, 0x32, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x55, 0x69, 0x6e, 0x33, 0x32, 0x12, 0x21, 0x0a, 0x0b,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x36, 0x34, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x55, 0x69, 0x6e, 0x36, 0x34, 0x12,
	0x21, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x6c, 0x74, 0x33, 0x32, 0x18, 0x6b,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x46, 0x6c, 0x74,
	0x33, 0x32, 0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x6c, 0x74, 0x36,
	0x34, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x46, 0x6c, 0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x62,
	0x79, 0x74, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x42, 0x79, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x4d, 0x73, 0x67, 0x1a, 0x1d, 0x0a, 0x09, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x74, 0x72, 0x1a, 0x39, 0x0a, 0x0b, 0x42, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a,
	0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x49,
	0x6e, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x49, 0x6e, 0x36, 0x34, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x55, 0x69, 0x6e, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x55, 0x69, 0x6e, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x46, 0x6c, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x6c,
	0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x79, 0x74, 0x73, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x0b,
	0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x11, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x11, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2c, 0x0a, 0x09, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50,
	0x41, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x42, 0x10, 0x02, 0x42, 0x0c, 0x0a,
	0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x2a, 0x26, 0x0a, 0x03, 0x54,
	0x79, 0x70, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x41, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50,
	0x42, 0x10, 0x02, 0x42, 0x0e, 0x5a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_test_proto_goTypes = []interface{}{
	(Typ)(0),                  // 0: example.Typ
	(Example_NestedTyp)(0),    // 1: example.Example.NestedTyp
	(*Msg)(nil),               // 2: example.Msg
	(*Example)(nil),           // 3: example.Example
	nil,                       // 4: example.Msg.BolMapEntry
	nil,                       // 5: example.Msg.StringMapEntry
	nil,                       // 6: example.Msg.In32MapEntry
	nil,                       // 7: example.Msg.In64MapEntry
	nil,                       // 8: example.Msg.Uin32MapEntry
	nil,                       // 9: example.Msg.Uin64MapEntry
	nil,                       // 10: example.Msg.Flt32MapEntry
	nil,                       // 11: example.Msg.Flt64MapEntry
	nil,                       // 12: example.Msg.BytsMapEntry
	(*Example_NestedMsg)(nil), // 13: example.Example.NestedMsg
	nil,                       // 14: example.Example.BolMapEntry
	nil,                       // 15: example.Example.StringMapEntry
	nil,                       // 16: example.Example.In32MapEntry
	nil,                       // 17: example.Example.In64MapEntry
	nil,                       // 18: example.Example.Uin32MapEntry
	nil,                       // 19: example.Example.Uin64MapEntry
	nil,                       // 20: example.Example.Flt32MapEntry
	nil,                       // 21: example.Example.Flt64MapEntry
	nil,                       // 22: example.Example.BytsMapEntry
	nil,                       // 23: example.Example.TypMapEntry
	nil,                       // 24: example.Example.MsgMapEntry
	nil,                       // 25: example.Example.NestedTypMapEntry
	nil,                       // 26: example.Example.NestedMsgMapEntry
}
var file_test_proto_depIdxs = []int32{
	4,  // 0: example.Msg.bol_map:type_name -> example.Msg.BolMapEntry
	5,  // 1: example.Msg.string_map:type_name -> example.Msg.StringMapEntry
	6,  // 2: example.Msg.in32_map:type_name -> example.Msg.In32MapEntry
	7,  // 3: example.Msg.in64_map:type_name -> example.Msg.In64MapEntry
	8,  // 4: example.Msg.uin32_map:type_name -> example.Msg.Uin32MapEntry
	9,  // 5: example.Msg.uin64_map:type_name -> example.Msg.Uin64MapEntry
	10, // 6: example.Msg.flt32_map:type_name -> example.Msg.Flt32MapEntry
	11, // 7: example.Msg.flt64_map:type_name -> example.Msg.Flt64MapEntry
	12, // 8: example.Msg.byts_map:type_name -> example.Msg.BytsMapEntry
	0,  // 9: example.Example.typ:type_name -> example.Typ
	2,  // 10: example.Example.msg:type_name -> example.Msg
	0,  // 11: example.Example.typ_arr:type_name -> example.Typ
	2,  // 12: example.Example.msg_arr:type_name -> example.Msg
	14, // 13: example.Example.bol_map:type_name -> example.Example.BolMapEntry
	15, // 14: example.Example.string_map:type_name -> example.Example.StringMapEntry
	16, // 15: example.Example.in32_map:type_name -> example.Example.In32MapEntry
	17, // 16: example.Example.in64_map:type_name -> example.Example.In64MapEntry
	18, // 17: example.Example.uin32_map:type_name -> example.Example.Uin32MapEntry
	19, // 18: example.Example.uin64_map:type_name -> example.Example.Uin64MapEntry
	20, // 19: example.Example.flt32_map:type_name -> example.Example.Flt32MapEntry
	21, // 20: example.Example.flt64_map:type_name -> example.Example.Flt64MapEntry
	22, // 21: example.Example.byts_map:type_name -> example.Example.BytsMapEntry
	23, // 22: example.Example.typ_map:type_name -> example.Example.TypMapEntry
	24, // 23: example.Example.msg_map:type_name -> example.Example.MsgMapEntry
	1,  // 24: example.Example.nested_typ:type_name -> example.Example.NestedTyp
	13, // 25: example.Example.nested_msg:type_name -> example.Example.NestedMsg
	25, // 26: example.Example.nested_typ_map:type_name -> example.Example.NestedTypMapEntry
	26, // 27: example.Example.nested_msg_map:type_name -> example.Example.NestedMsgMapEntry
	2,  // 28: example.Example.oneof_msg:type_name -> example.Msg
	0,  // 29: example.Example.TypMapEntry.value:type_name -> example.Typ
	2,  // 30: example.Example.MsgMapEntry.value:type_name -> example.Msg
	1,  // 31: example.Example.NestedTypMapEntry.value:type_name -> example.Example.NestedTyp
	13, // 32: example.Example.NestedMsgMapEntry.value:type_name -> example.Example.NestedMsg
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Example); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Example_NestedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_test_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Msg_OneofBol)(nil),
	}
	file_test_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Example_OneofBol)(nil),
		(*Example_OneofStr)(nil),
		(*Example_OneofIn32)(nil),
		(*Example_OneofIn64)(nil),
		(*Example_OneofUin32)(nil),
		(*Example_OneofUin64)(nil),
		(*Example_OneofFlt32)(nil),
		(*Example_OneofFlt64)(nil),
		(*Example_OneofByts)(nil),
		(*Example_OneofMsg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		EnumInfos:         file_test_proto_enumTypes,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}
